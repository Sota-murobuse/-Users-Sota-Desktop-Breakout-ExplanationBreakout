int length = 28;                // numbers of blocks

int[] X = new int[length];          // x positions of the upper-left corner of blocks
int[] Y = new int[length];			    // y positions of the upper-left corner of blocks
int[] visible = new int[length];		// switches for visible blocks

int blockX = 65;				    // x position of default (the first, upper-left) blocks
int blockY= 70;					    // y position of default (the first, upper-left) blocks

int newLineX;						   // start a new X line of blockX
int newLineY;						   // start a new Y line of blockY

float[] visibleBall = new float[1];         // collision detect for the ball
float[] ball_X = new float[1];          // positions of ball_X
float[] ball_Y = new float[1];          // positions of ball_Y
float[] velocity_X = new float[1];      // velocity of ball_X
float[] velocity_Y = new float[1];      // velocity of ball_Y

float VectorSpeed_X = random(-5.0, 5.0);          // vector and speed of ball_X
float VectorSpeed_Y = 5.0;          // vector and speed of ball_Y

void setup() {						// default
  size(600, 700);					// size of the screen

  for (int i = 0; i < length; i++ ) {         // align blocks
    visible[i] = 1;                           // assign switches on for visible blocks
    newLineX++;                               // start a new X line of blockX
    X[i] = (70*(newLineX-1)) + blockX;        // put x positions of blocks and leave 10 pixels spaces
    Y[i] = (40*(newLineY-1)) + blockY;        // put y positions of blocks and leave 10 pixels spaces

    if (newLineX == 7) {                      // if X line of blocks reached to 7,
    newLineY++;                               // start a new Y line of blockY
    newLineX = 0;                             // reset X line of blockX
    }
  }
}

void draw() {             // drawing objects

  background(000);				// background color is black

  surface.setTitle("Breakout");          // name title of the screen
  noStroke();                          // nothing outlines

  for (int i = 0; i < length; i++) {   // make 28 blocks
    if (visible[i] == 1) {             // if blocks are switched on visible
     rect(X[i], Y[i], 60, 30);          // size of a block
    }
  }

  for (int ii = 0; ii < 1; ii++) {          // array of balls
    for (int i = 0; i < length; i++) {      // array of blocks
      if (visible[i] == 1) {                // switches on of blocks, if they were still visible
        if (ball_X[ii] > X[i] - 5 && ball_X[ii] < X[i] + 65 && ball_Y[ii] > Y[i] - 5 && ball_Y[ii] < Y[i] + 35) {         // condition of collision detect between balls and blocks
          if (ball_X[ii] > X[i] - 5 && ball_X[ii] < X[i] + 10) velocity_X[ii] *= -1;          // collision and reflection between balls and blocks
          if (ball_X[ii] > X[i] + 50 && ball_X[ii] < X[i] + 65) velocity_X[ii] *= -1;         // collision and reflection between balls and blocks
          if (ball_Y[ii] > X[i] + 20 && ball_X[ii] < X[i] + 35) velocity_Y[ii] *= -1;         // collision and reflection between balls and blocks
          if (ball_Y[ii] > X[i] -5 && ball_X[ii] < X[i] + 10) velocity_Y[ii] *= -1;           // collision and reflection between balls and blocks
          visible[i] = 0;         // switches off, if balls and blocks got collision
        }
      }
    }
  }

  rect(mouseX - 35, 650, 70, 10);	         // paddle

  for (int ii = 0; ii < 1; ii++) {          // array of balls
    if (visibleBall[ii] == 1) {         // if switch on for collision of balls
      ellipse(ball_X[ii], ball_Y[ii], 20, 20);          // size of balls
      ball_X[ii] += velocity_X[ii];         // velocity with position X
      ball_Y[ii] += velocity_Y[ii];         // velocity with position Y
    }
  }

  for (int ii = 0; ii < 1; ii++) {          // array of balls, collision between balls and paddle
    if (visibleBall[ii] == 1) {         // if switch on for collision of balls
      if (ball_Y[ii] > 650 && ball_X[ii] < mouseX + 35 && ball_X[ii] > mouseX - 35) {         // condition of collision between balls and paddle
        velocity_Y[ii] *= -1;         //  reflect against paddle and velocity of balls
      }
    }
  }

  for (int ii = 0; ii < 1; ii++) {          // array of balls, collision between balls and walls (left/right)
    if (ball_X[ii] < 0) {         // if balls collided against left wall
      velocity_X[ii] *= -1;         // reflect balls and velocity
    } else if (ball_X[ii] > 600) {          // if balls collided against right wall
      velocity_X[ii] *= -1;         // reflect balls and velocity
      }
  }

  for (int ii = 0; ii < 1; ii++){         // array of balls, collision between balls and upper wall
    if (ball_Y[ii] < 0) {         // if balls collided against upper wall
      velocity_Y[ii] *= -1;         // reflect balls and velocity
    }
  }
}

void mouseClicked() {         // mouseclick for balls

  for (int ii = 0; ii < 1; ii++) {          // array of balls
    if (visibleBall[ii] == 0) {       // if switch off for collision of balls
      visibleBall[ii] = 1;          // turn on switch on bolls
      ball_X[ii] = mouseX;          // positions X of ball_X
      ball_Y[ii] = 640;         // positions Y of ball_Y
      velocity_X[ii] = VectorSpeed_X;          // vector and speed of ball_X
      velocity_Y[ii] = -VectorSpeed_Y;         // vector and speed of ball_Y
    }
  }
}
